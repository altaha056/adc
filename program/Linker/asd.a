;/*****************************************************
;This program was produced by the
;CodeWizardAVR V2.05.3 Standard
;Automatic Program Generator
;© Copyright 1998-2011 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 11/22/2021
;Author  : asd
;Company : asd
;Comments:
;
;
;Chip type               : ATmega32
;Program type            : Application
;AVR Core Clock frequency: 12.000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 512
;*****************************************************/
;
;#include <mega32.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;
;#include <delay.h>
;#include <stdlib.h>
;
;// Alphanumeric LCD functions
;#include <alcd.h>
;
;#define ADC_VREF_TYPE 0xC0
;float data, suhu;
;char temp[8];
;
;
;
;// Read the AD conversion result
;unsigned int read_adc(unsigned char adc_input)
; 0000 0028 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0029 ADMUX=adc_input | (ADC_VREF_TYPE & 0xff);
;PCODE: $0000000F VOL: 0
;	adc_input -> Y+0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0000 002A // Delay needed for the stabilization of the ADC input voltage
; 0000 002B delay_us(10);
;PCODE: $00000013 VOL: 0
; 0000 002C // Start the AD conversion
; 0000 002D ADCSRA|=0x40;
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
; 0000 002E // Wait for the AD conversion to complete
; 0000 002F while ((ADCSRA & 0x10)==0);
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0000 0030 ADCSRA|=0x10;
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
; 0000 0031 return ADCW;
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0000 0032 }
;PCODE: $00000021 VOL: 0
;
;
;void baca_suhu(){
; 0000 0035 void baca_suhu(){
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
; 0000 0036     data=read_adc(1);
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
; 0000 0037 }
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;
;void hitung_suhu(){
; 0000 0039 void hitung_suhu(){
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
; 0000 003A     suhu=(float)data/2.0479;
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
; 0000 003B }
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;
;
;// Declare your global variables here
;
;void main(void)
; 0000 0041 {
;PCODE: $00000033 VOL: 0
; 0000 0042 // Declare your local variables here
; 0000 0043 
; 0000 0044 // Input/Output Ports initialization
; 0000 0045 // Port A initialization
; 0000 0046 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 0047 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 0048 PORTA=0x00;
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0000 0049 DDRA=0x00;
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
; 0000 004A 
; 0000 004B // Port B initialization
; 0000 004C // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 004D // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 004E PORTB=0x00;
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
; 0000 004F DDRB=0x00;
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
; 0000 0050 
; 0000 0051 // Port C initialization
; 0000 0052 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 0053 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 0054 PORTC=0x00;
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
; 0000 0055 DDRC=0x00;
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
; 0000 0056 
; 0000 0057 // Port D initialization
; 0000 0058 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 0059 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 005A PORTD=0x00;
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
; 0000 005B DDRD=0x00;
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
; 0000 005C 
; 0000 005D // Timer/Counter 0 initialization
; 0000 005E // Clock source: System Clock
; 0000 005F // Clock value: Timer 0 Stopped
; 0000 0060 // Mode: Normal top=0xFF
; 0000 0061 // OC0 output: Disconnected
; 0000 0062 TCCR0=0x00;
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
; 0000 0063 TCNT0=0x00;
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
; 0000 0064 OCR0=0x00;
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
; 0000 0065 
; 0000 0066 // Timer/Counter 1 initialization
; 0000 0067 // Clock source: System Clock
; 0000 0068 // Clock value: Timer1 Stopped
; 0000 0069 // Mode: Normal top=0xFFFF
; 0000 006A // OC1A output: Discon.
; 0000 006B // OC1B output: Discon.
; 0000 006C // Noise Canceler: Off
; 0000 006D // Input Capture on Falling Edge
; 0000 006E // Timer1 Overflow Interrupt: Off
; 0000 006F // Input Capture Interrupt: Off
; 0000 0070 // Compare A Match Interrupt: Off
; 0000 0071 // Compare B Match Interrupt: Off
; 0000 0072 TCCR1A=0x00;
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
; 0000 0073 TCCR1B=0x00;
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
; 0000 0074 TCNT1H=0x00;
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
; 0000 0075 TCNT1L=0x00;
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
; 0000 0076 ICR1H=0x00;
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
; 0000 0077 ICR1L=0x00;
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
; 0000 0078 OCR1AH=0x00;
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
; 0000 0079 OCR1AL=0x00;
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
; 0000 007A OCR1BH=0x00;
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
; 0000 007B OCR1BL=0x00;
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
; 0000 007C 
; 0000 007D // Timer/Counter 2 initialization
; 0000 007E // Clock source: System Clock
; 0000 007F // Clock value: Timer2 Stopped
; 0000 0080 // Mode: Normal top=0xFF
; 0000 0081 // OC2 output: Disconnected
; 0000 0082 ASSR=0x00;
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
; 0000 0083 TCCR2=0x00;
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
; 0000 0084 TCNT2=0x00;
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
; 0000 0085 OCR2=0x00;
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
; 0000 0086 
; 0000 0087 // External Interrupt(s) initialization
; 0000 0088 // INT0: Off
; 0000 0089 // INT1: Off
; 0000 008A // INT2: Off
; 0000 008B MCUCR=0x00;
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
; 0000 008C MCUCSR=0x00;
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
; 0000 008D 
; 0000 008E // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 008F TIMSK=0x00;
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
; 0000 0090 
; 0000 0091 // USART initialization
; 0000 0092 // USART disabled
; 0000 0093 UCSRB=0x00;
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
; 0000 0094 
; 0000 0095 // Analog Comparator initialization
; 0000 0096 // Analog Comparator: Off
; 0000 0097 // Analog Comparator Input Capture by Timer/Counter 1: Off
; 0000 0098 ACSR=0x80;
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
; 0000 0099 SFIOR=0x00;
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
; 0000 009A 
; 0000 009B // ADC initialization
; 0000 009C // ADC Clock frequency: 750.000 kHz
; 0000 009D // ADC Voltage Reference: Int., cap. on AREF
; 0000 009E ADMUX=ADC_VREF_TYPE & 0xff;
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
; 0000 009F ADCSRA=0x84;
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
; 0000 00A0 
; 0000 00A1 // SPI initialization
; 0000 00A2 // SPI disabled
; 0000 00A3 SPCR=0x00;
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
; 0000 00A4 
; 0000 00A5 // TWI initialization
; 0000 00A6 // TWI disabled
; 0000 00A7 TWCR=0x00;
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
; 0000 00A8 
; 0000 00A9 // Alphanumeric LCD initialization
; 0000 00AA // Connections are specified in the
; 0000 00AB // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
; 0000 00AC // RS - PORTC Bit 0
; 0000 00AD // RD - PORTC Bit 1
; 0000 00AE // EN - PORTC Bit 2
; 0000 00AF // D4 - PORTC Bit 4
; 0000 00B0 // D5 - PORTC Bit 5
; 0000 00B1 // D6 - PORTC Bit 6
; 0000 00B2 // D7 - PORTC Bit 7
; 0000 00B3 // Characters/line: 8
; 0000 00B4 lcd_init(16);
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
; 0000 00B5 //suhu ruangan
; 0000 00B6 lcd_clear();
;PCODE: $0000007C VOL: 0
; 0000 00B7 lcd_gotoxy(0,0);
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
; 0000 00B8 lcd_puts("suhu ruangan: ");
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
; 0000 00B9 while (1)
;PCODE: $00000084 VOL: 0
; 0000 00BA       {
; 0000 00BB       // suhu berapa derajat celsius
; 0000 00BC         baca_suhu();
;PCODE: $00000085 VOL: 0
; 0000 00BD         hitung_suhu();
;PCODE: $00000086 VOL: 0
; 0000 00BE 
; 0000 00BF         ftoa(suhu,0,temp);
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
; 0000 00C0         lcd_gotoxy(0,1);
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
; 0000 00C1         lcd_puts(temp);
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
; 0000 00C2 
; 0000 00C3       }
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
; 0000 00C4 }
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0

	.DSEG
_0x6:
	.BYTE 0xF
